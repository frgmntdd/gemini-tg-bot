# bot.py
# --- –≠–¢–û–¢ –ö–û–î –î–û–õ–ñ–ï–ù –†–ê–ë–û–¢–ê–¢–¨ ---

import os
import logging
import asyncio
import google.generativeai as genai

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
)
from telegram.constants import ParseMode

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
if not TELEGRAM_TOKEN or not GEMINI_API_KEY:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –∏ GEMINI_API_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ Vercel.")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º Gemini API
genai.configure(api_key=GEMINI_API_KEY)

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π
MODEL_PRO = 'gemini-2.5-pro'
MODEL_FLASH = 'gemini-2.5-flash'

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_menu():
    keyboard = [
        [KeyboardButton("‚ú® Gemini 1.5 Pro"), KeyboardButton("‚ö° Gemini 1.5 Flash")],
        [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    context.user_data['model'] = MODEL_FLASH
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n"
        f"–Ø —á–∞—Ç-–±–æ—Ç –Ω–∞ –±–∞–∑–µ –º–æ–¥–µ–ª–µ–π Gemini –æ—Ç Google. "
        f"–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞ –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å <b>Flash</b>.\n\n"
        f"–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –≤ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.",
        reply_markup=get_main_menu()
    )

async def help_command(update: Update, context: CallbackContext) -> None:
    model_key = context.user_data.get('model', MODEL_FLASH)
    model_display_name = "Pro" if "pro" in model_key else "Flash"
    await update.message.reply_text(
        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
        "1Ô∏è‚É£ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ç–µ–∫—Å—Ç.\n"
        "2Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏:\n"
        f"   ‚Ä¢ <b>‚ú® Gemini 1.5 Pro</b>: –ú–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.\n"
        f"   ‚Ä¢ <b>‚ö° Gemini 1.5 Flash</b>: –°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n\n"
        f"<i>–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {model_display_name}</i>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_main_menu()
    )

async def set_model(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    if 'Pro' in text:
        context.user_data['model'] = MODEL_PRO
        model_display_name = "Gemini 1.5 Pro"
    else:
        context.user_data['model'] = MODEL_FLASH
        model_display_name = "Gemini 1.5 Flash"
    await update.message.reply_text(
        f"‚úÖ –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞ <b>{model_display_name}</b>. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!",
        parse_mode=ParseMode.HTML,
        reply_markup=get_main_menu()
    )

async def handle_text(update: Update, context: CallbackContext) -> None:
    user_message = update.message.text
    model_name = context.user_data.get('model', MODEL_FLASH)
    model_display_name = "Pro" if "pro" in model_name else "Flash"
    thinking_message = await update.message.reply_text(
        f"<i>ü§ñ –î—É–º–∞—é —Å –ø–æ–º–æ—â—å—é {model_display_name}...</i>",
        parse_mode=ParseMode.HTML
    )
    try:
        model = genai.GenerativeModel(model_name)
        response = await model.generate_content_async(user_message)
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=thinking_message.message_id,
            text=response.text
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini: {e}")
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=thinking_message.message_id,
            text="‚ùå –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
        )

# --- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
# –í–û–¢ –≠–¢–ê –ß–ê–°–¢–¨ –°–ê–ú–ê–Ø –í–ê–ñ–ù–ê–Ø –î–õ–Ø VERCEL!
# –ú—ã —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç `application` –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏.
application = Application.builder().token(TELEGRAM_TOKEN).build()

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("help", help_command))
application.add_handler(MessageHandler(filters.Regex(r'^(‚ú® Gemini 1.5 Pro|‚ö° Gemini 1.5 Flash)'), set_model))
application.add_handler(MessageHandler(filters.Regex(r'^‚ÑπÔ∏è –ü–æ–º–æ—â—å$'), help_command))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
